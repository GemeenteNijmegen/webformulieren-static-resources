{"version":3,"sources":["webpack:///src/app/app-config.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["appConfig","setConfig","data","getConfig","initialize","production","appModuleContainer","bootstrapModule","AppModule","err","console","error","fetch","then","response","ok","json","Error","config","webpackEmptyAsyncContext","req","Promise","resolve","e","code","keys","module","exports","id"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAAA,UAAIA,SAAS,GAAQ,EAArB;;AAEO,UAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,IAAD,EAAe;AACpCF,iBAAS,GAAGE,IAAZ;AACH,OAFM;;AAIA,UAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AAC3B,eAAOH,SAAP;AACH,OAFM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFP,eAAeI,UAAf,GAA4B;;;;;;;AAC1B,sBAAI,oEAAYC,UAAhB,EAA4B;AAC1B;AACD;;;AAE0B,yBAAM;AAAA;AAAA;AAAA;AAAA,0BAAN;;;AAArBC,oC;;AACN,8FAAyBC,eAAzB,CAAyCD,kBAAkB,CAACE,SAA5D,WACS,UAAAC,GAAG;AAAA,2BAAIC,OAAO,CAACC,KAAR,CAAcF,GAAd,CAAJ;AAAA,mBADZ;;;;;;;;;AAED;;AAEDG,WAAK,CAAC,yBAAD,CAAL,CACGC,IADH,CACQ,UAAAC,QAAQ,EAAI;AAChB,YAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,iBAAOD,QAAQ,CAACE,IAAT,EAAP;AACD;;AACD,cAAM,IAAIC,KAAJ,CAAU,2BAAV,CAAN;AACD,OANH,EAOGJ,IAPH,CAOQ,UAAAK,MAAM,EAAI;AACd,0EAAUA,MAAV;AACD,OATH,WAUS,UAAAT,GAAG;AAAA,eAAIC,OAAO,CAACC,KAAR,CAAcF,GAAd,CAAJ;AAAA,OAVZ,aAWWL,UAXX;;;;;;;;;;;;;;ACdA,eAASe,wBAAT,CAAkCC,GAAlC,EAAuC;AACtC;AACA;AACA,eAAOC,OAAO,CAACC,OAAR,GAAkBT,IAAlB,CAAuB,YAAW;AACxC,cAAIU,CAAC,GAAG,IAAIN,KAAJ,CAAU,yBAAyBG,GAAzB,GAA+B,GAAzC,CAAR;AACAG,WAAC,CAACC,IAAF,GAAS,kBAAT;AACA,gBAAMD,CAAN;AACA,SAJM,CAAP;AAKA;;AACDJ,8BAAwB,CAACM,IAAzB,GAAgC,YAAW;AAAE,eAAO,EAAP;AAAY,OAAzD;;AACAN,8BAAwB,CAACG,OAAzB,GAAmCH,wBAAnC;AACAO,YAAM,CAACC,OAAP,GAAiBR,wBAAjB;AACAA,8BAAwB,CAACS,EAAzB,GAA8B,MAA9B","file":"main-es5.js","sourcesContent":["let appConfig: any = {};\n\nexport const setConfig = (data: any) => {\n    appConfig = data;\n};\n\nexport const getConfig = () => {\n    return appConfig;\n};","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { getConfig, setConfig } from './app/app-config';\n\nasync function initialize() {\n  if (getConfig().production) {\n    enableProdMode();\n  }\n\n  const appModuleContainer = await import('./app/app.module');\n  platformBrowserDynamic().bootstrapModule(appModuleContainer.AppModule)\n    .catch(err => console.error(err));\n}\n\nfetch('/assets/app-config.json')\n  .then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error('app-config.json not found');\n  })\n  .then(config => {\n    setConfig(config)\n  })\n  .catch(err => console.error(err))\n  .finally(initialize)\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}